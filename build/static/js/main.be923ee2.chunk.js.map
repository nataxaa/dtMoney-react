{"version":3,"sources":["assets/logo.svg","components/Header/styles.ts","components/Header/index.tsx","styles/global.ts","components/Summary/styles.ts","assets/total.svg","assets/income.svg","assets/outcome.svg","services/api.ts","hooks/useTransactions.tsx","components/Summary/index.tsx","components/Dashboard/styles.ts","components/TransactionTable/styles.ts","components/TransactionTable/index.tsx","components/Dashboard/index.tsx","assets/close.svg","components/NewTransactionModal/styles.ts","components/NewTransactionModal/index.tsx","App.tsx","index.tsx"],"names":["Container","styled","header","Wrapper","div","Header","onOpenNewTransactionModal","src","logoImg","alt","type","onClick","GlobalStyle","createGlobalStyle","api","axios","create","baseURL","TransactionsContext","createContext","TransactionProvider","children","useState","transactions","setTransactions","transactionInput","a","post","createdAt","Date","response","transaction","data","useEffect","get","then","Provider","value","createTransaction","useTransactions","useContext","Summary","summary","reduce","acc","deposits","amount","total","withdraws","incomeImg","Intl","NumberFormat","style","currency","format","outcomeImg","className","totalImg","main","TransactionTable","map","title","category","DateTimeFormat","id","Dashboard","form","TransactionTypeContainer","colors","green","red","RadioBox","button","props","isActive","transparentize","activeColor","darken","NewTransactionModal","isOpen","onRequestClose","setTitle","setAmount","setCategory","setType","event","preventDefault","overlayClassName","closeImg","onSubmit","placeholder","onChange","target","Number","App","isNewTransactionModalOpen","setIsNewTransactionModalOpen","Modal","setAppElement","createServer","models","Model","seeds","server","db","loadData","routes","this","namespace","schema","all","request","JSON","parse","requestBody","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.be923ee2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.614d71d1.svg\";","import styled from 'styled-components'\n\nexport const Container = styled.header`\n  background: var(--blue);\n`\n\nexport const Wrapper = styled.div`\n  max-width: 1120px;\n  margin: 0 auto;\n\n  padding: 2rem 1rem 12rem;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  button {\n    font-size: 1rem;\n    color: #FFFFFF;\n    background: var(--blue-light);\n    border: 0;\n    padding: 0 2rem;\n    border-radius: 0.25rem;\n    height: 3rem;\n\n    transition: filter 0.2s ease;\n\n    &:hover{\n      filter: brightness(0.9);\n    }\n\n  }\n\n`","import logoImg from '../../assets/logo.svg';\nimport { Container, Wrapper } from './styles';\n\ninterface HeaderProps {\n  onOpenNewTransactionModal: () => void;\n}\n\nexport function Header({ onOpenNewTransactionModal }: HeaderProps) {\n  return (\n    <Container>\n      <Wrapper>\n        <img src={ logoImg } alt=\"dt.money\" />\n        <button \n          type=\"button\"\n          onClick={ onOpenNewTransactionModal }\n        >\n          Nova transação\n        </button>\n      </Wrapper>\n    </Container>\n  )\n} ","import { createGlobalStyle } from 'styled-components'\n\nexport const GlobalStyle = createGlobalStyle`\n\n  :root {\n    --background: #F0F2F5;\n    --white: #FFFFFF;\n\n    --blue: #5429CC;\n    --blue-light: #6933FF;\n    --green: #33CC95;\n    --red: #E62E4D;\n\n    --title: #363F5F;\n    --text: #969CB3;\n  }\n\n  *{\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n\n  html  {\n    @media(max-width: 1080px) {\n      font-size: 93.75%;\n    }\n    @media(max-width: 720px) {\n      font-size: 87.5%\n    }\n  }\n\n  body {\n    background: var(--background);\n    -webkit-font-smoothing: antialiased;\n  }\n\n  body, input, textarea, button {\n    font-family: 'Poppins', sans-serif;\n    font-weight: 400;\n  }\n\n  h1, h2, h3, h4, h5, h6, strong {\n    font-weight: 600;\n  }\n\n  button {\n    cursor: pointer;\n  }\n\n  [disabled] {\n    opacity: 0.6;\n    cursor: not-allowed;\n  }\n\n  .react-modal-overlay {\n    background: rgba(0, 0, 0, 0.5);\n\n    position: fixed;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: 0;\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  .react-modal-content {\n    width: 100%;\n    max-width: 576px;\n    background: var(--background);\n    padding: 3rem;\n    position: relative;\n    border-radius: 0.25rem;\n  }\n\n  .react-modal-close {\n    position: absolute;\n    right: 1.5rem;\n    top: 1.5rem;\n    border: 0;\n    background: transparent;\n\n    transition: filter 0.2s ease;\n\n    &:hover {\n      filter: brightness(0.8)\n    }\n\n  }\n\n`","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 2rem;\n  margin-top: -10rem;\n\n  div {\n    background: var(--white);\n    padding: 1.5rem 2rem;\n    border-radius: 0.25rem;\n    color: var(--title);\n\n    header {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n    }\n\n    strong {\n      display: block;\n      margin-top: 1rem;\n      font-size: 2rem;\n      line-height: 3rem;\n      font-weight: 500;\n    }\n\n    &.total {\n      color: #FFFFFF;\n      background: var(--green);\n    }\n\n  }\n` ","export default __webpack_public_path__ + \"static/media/total.e90c2d1e.svg\";","export default __webpack_public_path__ + \"static/media/income.d58effe2.svg\";","export default __webpack_public_path__ + \"static/media/outcome.6eb96d30.svg\";","import axios from 'axios';\n\nexport const api = axios.create({\n  baseURL: 'https://localhost:3000/api'\n})","import { api } from '../services/api';\nimport { createContext, useEffect, useState, ReactNode, useContext } from 'react';\n\ninterface Transaction {\n  id: number;\n  title: string;\n  amount: number;\n  type: string;\n  category: string;\n  createdAt: string;\n}\n\ninterface TransactionsContextData {\n  transactions: Transaction[];\n  createTransaction: (transaction: TransactionInput) => Promise<void>;\n}\n\ntype TransactionInput = Omit<Transaction, 'id' | 'createdAt'>\n\ninterface TransactionProviderProps {\n  children: ReactNode;\n}\n\nconst TransactionsContext = createContext<TransactionsContextData>(\n  {} as TransactionsContextData\n);\n\nexport function TransactionProvider({ children }: TransactionProviderProps ) {\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n\n  useEffect(() => {\n    api.get('transactions')\n    .then(response => setTransactions(response.data.transactions))\n  }, []);\n\n  async function createTransaction(transactionInput: TransactionInput) {\n    const response = await api.post('/transactions', {\n      ...transactionInput,\n      createdAt: new Date(),\n    })\n    const { transaction } = response.data;\n    setTransactions([\n      ...transactions, \n      transaction,\n    ]);\n  }\n\n  return (\n    <TransactionsContext.Provider value={{ transactions, createTransaction }}>\n      { children }\n    </TransactionsContext.Provider>\n  )\n\n}\n\nexport function useTransactions() {\n  const context = useContext(TransactionsContext);\n\n\n  \n  return context;\n}","import { Container } from \"./styles\";\nimport totalImg from '../../assets/total.svg';\nimport incomeImg from '../../assets/income.svg';\nimport outcomeImg from '../../assets/outcome.svg';\nimport { useTransactions } from '../../hooks/useTransactions';\n\nexport function Summary() {\n  const {transactions} = useTransactions();\n\n  const summary = transactions.reduce((acc, transaction) => {\n    if (transaction.type === 'deposit') {\n      acc.deposits += transaction.amount;\n      acc.total += transaction.amount;\n    } else {\n      acc.withdraws += transaction.amount;\n      acc.total -= transaction.amount;\n    }\n    return acc;\n  }, {\n    deposits: 0,\n    withdraws: 0,\n    total: 0,\n  })\n\n  return(\n    <Container>  \n      <div>\n        <header>\n          <p>Entradasa</p>\n          <img src={ incomeImg } alt=\"Entradas\" />\n        </header>\n        <strong>\n        {new Intl.NumberFormat('pt-BR', {\n          style: 'currency',\n          currency: 'BRL'\n        }).format(summary.deposits )}\n        </strong>\n      </div>\n      <div>\n        <header>\n          <p>Saídas</p>\n          <img src={ outcomeImg } alt=\"Saídas\" />\n        </header>\n        <strong>\n        -\n        {new Intl.NumberFormat('pt-BR', {\n          style: 'currency',\n          currency: 'BRL'\n        }).format(summary.withdraws )}\n        </strong>\n      </div>\n      <div className=\"total\">\n        <header>\n          <p>Total</p>\n          <img src={ totalImg } alt=\"Total\" />\n        </header>\n        <strong>\n        {new Intl.NumberFormat('pt-BR', {\n          style: 'currency',\n          currency: 'BRL'\n        }).format(summary.total )}\n        </strong>\n      </div>\n    </Container>\n  )\n}","import styled from \"styled-components\";\n\nexport const Container = styled.main`\n  max-width: 1120px;\n  margin: 0 auto;\n  padding: 2.5rem 1rem;\n`","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  margin-top: 4rem;\n\n  table {\n    width: 100%;\n    border-spacing: 0 0.5rem;\n\n    th {\n      color: var(--text);\n      font-weight: 400;\n      padding: 1rem 2rem;\n      text-align: left;\n      line-height: 1.5rem;\n    }\n\n    td {\n      padding: 1rem 2rem;\n      border: 0;\n      background: var(--white);\n      color: var(--text);\n      border-radius: 0.25rem;\n\n      &:first-child {\n        color: var(--title);\n      }\n\n      &.deposit {\n        color: var(--green);\n      }\n\n      &.withdraw {\n        color: var(--red);\n      }\n\n    }\n\n\n\n  }\n\n`","import { Container } from \"./styles\";\nimport { useTransactions } from '../../hooks/useTransactions';\n\nexport function TransactionTable() {\n  const { transactions } = useTransactions();\n\n  return (\n    <Container>\n      <table>\n        <thead>\n          <tr>\n            <th>Título</th>\n            <th>Valor</th>\n            <th>Categoria</th>\n            <th>Data</th>\n          </tr>\n        </thead>\n        <tbody>\n          {transactions.map(transaction => (\n            <tr key={transaction.id}>\n              <td>{transaction.title}</td>\n              <td className={transaction.type}>\n                {new Intl.NumberFormat('pt-BR', {\n                  style: 'currency',\n                  currency: 'BRL'\n                }).format(transaction.amount)}\n              </td>\n              <td>{transaction.category}</td>\n              <td>\n              {new Intl.DateTimeFormat('pt-BR').format(\n                new Date(transaction.createdAt)\n              )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </Container>\n  )\n}","import { Summary } from \"../Summary\";\nimport { Container } from \"./styles\";\nimport { TransactionTable } from \"../TransactionTable\";\n\nexport function Dashboard() {\n  return (\n    <Container>\n      <Summary />\n      <TransactionTable />\n    </Container>\n  )\n}","export default __webpack_public_path__ + \"static/media/close.f62862c6.svg\";","import styled from 'styled-components';\nimport { darken, transparentize } from 'polished'\n\nexport const Container = styled.form`\n  h2 {\n    color: var(--title);\n    font-size: 1.5rem;\n    margin-bottom: 2rem;\n  }\n\n  input {\n    width: 100%;\n    padding: 0 1.5rem;\n    height: 4rem;\n\n    border-radius: 0.25rem;\n    border: 1px solid #D7D7D7;\n    background: #E7E9EE;\n\n    font-weight: 400;\n    font-size: 1rem;  \n\n    &::placeholder {\n      color: var(--text);\n    }\n\n    & + input {\n      margin-top: 1rem;\n    }\n\n  }\n\n  button[type=\"submit\"] {\n    width: 100%;\n    padding: 0 1.5rem;\n    height: 4rem;\n    background: var(--green);\n    color: #FFFFFF;\n    border-radius: 0.25rem;\n    border: 0;\n    font-size: 1rem;\n    margin-top: 1.5rem; \n    font-weight: 600;\n\n    transition: filter 0.2s ease;\n\n    &:hover {\n      filter: brightness(0.9);\n    }\n\n  }\n\n`\n\nexport const TransactionTypeContainer = styled.div `\n  margin: 1rem 0;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 0.5rem;\n`\ninterface RadioBoxProps {\n  isActive: boolean;\n  activeColor: 'green' | 'red';\n}\n\nconst colors = {\n  green: '#33CC95',\n  red: '#E52E4D'\n}\n\nexport const RadioBox = styled.button<RadioBoxProps>`\n  height: 4rem;\n  border: 1px solid #D7D7D7;\n  border-radius: 0.25rem;\n\n  background: ${(props) => props.isActive \n  ? transparentize(0.9, colors[props.activeColor])\n  : 'transparent'};\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  transition: border-color 0.2s ease;\n\n  &:hover {\n    border-color: ${darken(0.1, '#D7D7D7')}; \n  }\n\n  img {\n    width: 20px;\n    height: 20px;\n  }\n\n  span {\n    display: inline-block;\n    margin-left: 1rem;\n    font-size: 1rem;\n    color: var(--title);\n  }\n`","import Modal from 'react-modal';\nimport { FormEvent, useState } from 'react';\nimport closeImg from '../../assets/close.svg';\nimport incomeImg from '../../assets/income.svg';\nimport outcomeImg from '../../assets/outcome.svg';\nimport { useTransactions } from '../../hooks/useTransactions';\nimport { Container, TransactionTypeContainer, RadioBox } from './styles';\n\nModal.setAppElement('#root');\n\ninterface NewTransactionModalProps {\n  isOpen: boolean; \n  onRequestClose: () => void;\n}\n\nexport function NewTransactionModal({ isOpen, onRequestClose }: NewTransactionModalProps) {\n\n  const { createTransaction } = useTransactions();\n\n  const [title, setTitle] = useState('')\n  const [amount, setAmount] = useState(0)\n  const [category, setCategory] = useState('')\n  const [type, setType] = useState('deposit');\n\n  async function handleCreateNewTransaction(event: FormEvent) {\n    event.preventDefault();\n    await createTransaction({\n      title,\n      amount,\n      category,\n      type\n    })\n    setTitle('');\n    setAmount(0);\n    setCategory('');\n    setType('deposit')\n    onRequestClose();\n  }\n\n  return (\n    <Modal \n      isOpen={ isOpen } \n      onRequestClose={ onRequestClose }\n      overlayClassName=\"react-modal-overlay\"\n      className=\"react-modal-content\"\n    >\n      <button \n        type=\"button\" \n        onClick={ onRequestClose} \n        className=\"react-modal-close\"\n      >\n        <img src={ closeImg } alt=\"Fechar modal\" />\n       </button>\n      <Container onSubmit={ handleCreateNewTransaction}>\n        <h2>Cadastrar informação</h2>\n        <input \n          placeholder=\"Título\" \n          value={ title } \n          onChange={ event => setTitle(event.target.value)}\n        />\n        <input \n          type=\"number\" \n          placeholder=\"Valor\"\n          value={ amount } \n          onChange={ event => setAmount(Number(event.target.value))}\n        />\n        <TransactionTypeContainer>\n          <RadioBox \n            type=\"button\"\n            onClick={ () => { setType('deposit') }}\n            isActive={type === 'deposit'}\n            activeColor=\"green\"\n          >\n            <img src={ incomeImg } alt=\"Entrada\" />\n            <span>Entrada</span>\n          </RadioBox>\n          <RadioBox\n            type=\"button\"\n            onClick={ () => { setType('withdraw') }}\n            isActive={type === 'withdraw'}\n            activeColor=\"red\"\n          >\n            <img src={ outcomeImg } alt=\"Saída\" />\n            <span>Saída</span>\n          </RadioBox>\n        </TransactionTypeContainer>\n        <input \n          placeholder=\"Categoria\"\n          value={ category } \n          onChange={ event => setCategory(event.target.value)}\n        />\n        <button type=\"submit\">Cadastrar</button>\n      </Container>\n    </Modal>\n  )\n}","import { useState } from 'react';\nimport { Header } from './components/Header';\nimport { GlobalStyle } from './styles/global';\nimport { Dashboard } from './components/Dashboard';\nimport { TransactionProvider } from './hooks/useTransactions';\nimport { NewTransactionModal } from './components/NewTransactionModal';\n\nexport function App() {\n  const [isNewTransactionModalOpen, setIsNewTransactionModalOpen] = useState(false);\n\n  function handleOpenNewTransactionModal() {\n    setIsNewTransactionModalOpen(true);\n  }\n\n  function handleCloseNewTransactionModal() {\n    setIsNewTransactionModalOpen(false);\n  }\n\n  return (\n    <TransactionProvider>\n      <Header onOpenNewTransactionModal={ handleOpenNewTransactionModal }/>\n      <Dashboard />\n      <NewTransactionModal \n        isOpen={ isNewTransactionModalOpen }\n        onRequestClose = { handleCloseNewTransactionModal }\n      />\n      <GlobalStyle />\n    </TransactionProvider>\n  );\n}\n","import React from 'react';\nimport { App } from './App';\nimport ReactDOM from 'react-dom';\nimport { createServer, Model } from 'miragejs'\n\ncreateServer({\n  models: {\n    transaction: Model,\n  },\n\n  seeds(server) {\n    server.db.loadData({\n      transactions: [\n      {\n        id: 1,\n        title: 'Freelance de website',\n        type: 'deposit',\n        category: 'Dev',\n        amount: 6000,\n        createdAt: new Date('2021-02-12 09:00:00')\n      },\n      {\n        id: 2,\n        title: 'Aluguel',\n        type: 'withdraw',\n        category: 'Casa',\n        amount: 1100,\n        createdAt: new Date('2021-02-14 11:00:00')\n      },\n    ]\n    })\n  },\n\n  routes() {\n    this.namespace = 'api';\n    this.get('/transactions', () => {\n      return this.schema.all('transaction')\n    })\n\n    this.post('/transactions', (schema, request) => {\n      const data = JSON.parse(request.requestBody)\n      return schema.create('transaction', data)\n    })\n\n  }\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}